server.port = 12000
spring.application.name = consumer-server
eureka.client.service-url.defaultZone = http://localhost:13000/eureka/, http://localhost:13001/eureka/
eureka.instance.prefer-ip-address = true
eureka.instance.instance-id=${spring.cloud.client.ip-address}:${server.port}
eureka.instance.lease-renewal-interval-in-seconds = 5
eureka.instance.lease-expiration-duration-in-seconds = 30

#if over failure-rate, CircuitBreaker turn to open
resilience4j.circuitbreaker.configs.defalut.failure-rate-threshold = 30
#the type of sliding window: TIME_BASED, COUNT_BASED
resilience4j.circuitbreaker.configs.defalut.sliding-window-type = TIME_BASED
#the size of sliding window: TIME_BASED(10s), COUNT_BASED(10 requests)
resilience4j.circuitbreaker.configs.defalut.sliding-window-size=10
#the minimum number of requests. only the requests num get this number in the sliding window, the CircuitBreaker turn to OPEN.
resilience4j.circuitbreaker.configs.defalut.minimum-number-of-calls=2
#true: automatically change from OPEN to HALFOPEN, even if no request is made.
resilience4j.circuitbreaker.configs.defalut.automatic-transition-from-open-to-half-open-enabled=true
#takes 2 seconds to transition state from OPEN to HALFOPEN.
resilience4j.circuitbreaker.configs.defalut.wait-duration-in-open-state=2s
#when CircuitBreaker is HALFOPEN, the number of allow passing requests.
resilience4j.circuitbreaker.configs.defalut.permitted-number-of-calls-in-half-open-state=3
#white list
#resilience4j.circuitbreaker.configs.defalut.ignore-exceptions[0]=
#black list
resilience4j.circuitbreaker.configs.defalut.record-exceptions[0]=java.lang.Exception
#construct a backendA example
resilience4j.circuitbreaker.instances.backendA.base-config=defalut

#construct a backendB example
resilience4j.circuitbreaker.instances.backendB.failure-rate-threshold=50
resilience4j.circuitbreaker.instances.backendB.sliding-window-type=TIME_BASED
resilience4j.circuitbreaker.instances.backendB.sliding-window-size=10
#slow call rate
resilience4j.circuitbreaker.instances.backendB.slow-call-rate-threshold=30
#if the time is bigger than this time ,this call is a slow call.
resilience4j.circuitbreaker.instances.backendB.slow-call-duration-threshold=2s
resilience4j.circuitbreaker.instances.backendB.minimum-number-of-calls=2
resilience4j.circuitbreaker.instances.backendB.permitted-number-of-calls-in-half-open-state=3
resilience4j.circuitbreaker.instances.backendB.wait-duration-in-open-state=2s